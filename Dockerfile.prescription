# Downloads
# podman pull --arch=amd64  python:3.13-slim && podman tag docker.io/library/python:3.13-slim  localhost/python:amd64-3.13-slim
# podman pull --arch=arm64  python:3.13-slim && podman tag docker.io/library/python:3.13-slim  localhost/python:arm64-3.13-slim

# Build command:
# podman build --platform linux/arm64 --build-arg BASE_TAG=arm64-3.13-slim -t prescription:arm64-v1 -f ./Dockerfile.prescription .
# podman build --platform linux/amd64 --build-arg BASE_TAG=amd64-3.13-slim -t prescription:amd64-v1 -f ./Dockerfile.prescription .

# Run the image
# podman run -it --rm -p 8080:8080 -e OLLAMA_HOST=http://192.168.0.100:11434 localhost/prescription:arm64-v1

ARG BASE_TAG=

FROM localhost/python:${BASE_TAG}
# FROM python:3.13-slim

# Install system dependencies needed for ChromaDB, sentence-transformers and other libraries
# RUN apt-get update && apt-get install -y \
#     libgl1-mesa-dri \
#     libgl1-mesa-dev \
#     libglib2.0-0 \
#     libsm6 \
#     libxext6 \
#     libxrender-dev \
#     libgomp1 \
#     libgstreamer1.0-0 \
#     build-essential \
#     && rm -rf /var/lib/apt/lists/*

WORKDIR /app

COPY ./requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the API module
COPY ./api ./api

# Copy the RAG module  
COPY ./rag ./rag

# Copy data files
# COPY ./data ./data

# Copy other necessary files
# COPY ./main.py .
# COPY ./pyproject.toml .

# Create empty __init__.py files if they don't exist
# RUN touch ./api/__init__.py || true
# RUN touch ./rag/__init__.py || true
# Multiple environment variables can be set in a single ENV instruction
ENV OLLAMA_HOST=http://localhost:11434 \
    OLLAMA_MODEL=llama3.2:3b \
    EMBEDDING_MODEL=intfloat/multilingual-e5-large-instruct \
    LOG_LEVEL=INFO \
    CHROMA_HOST=localhost \
    CHROMA_PORT=8000 \
    MLFLOW_TRACKING_URI=http://localhost:5001 \
    MLFLOW_EXPERIMENT_NAME= \
    MLFLOW_REGISTRY_URI=http://localhost:5001

# Environment variables
# ENV OLLAMA_HOST=http://localhost:11434
# ENV OLLAMA_MODEL=llama3.2:3b
# ENV LLM_TEMPERATURE=0.1
# ENV EMBEDDING_MODEL=intfloat/multilingual-e5-large-instruct
# ENV LOG_LEVEL=INFO

# ENV API_HOST=0.0.0.0
# ENV API_PORT=8081
# ENV API_RELOAD=false
# ENV LOG_LEVEL=INFO
# ENV API_TITLE="Prescription RAG API"
# ENV API_VERSION=1.0.0
# ENV API_DESCRIPTION="RAG system for agricultural prescriptions"

# ENV CHROMA_HOST=localhost
# ENV CHROMA_PORT=8000
# ENV CHROMA_PERSIST_DIR=./chroma_capstone_db_new_reduced_hugging_face
# ENV RAG_COLLECTIONS=Tomato,Potato,Rice,Wheat,Corn

# MLflow Configuration used for classification code
# ENV MLFLOW_TRACKING_URI=http://localhost:5001
# ENV MLFLOW_EXPERIMENT_NAME=
# ENV MLFLOW_ARTIFACT_LOCATION=./mlflow_artifacts
# ENV MLFLOW_REGISTRY_URI=http://localhost:5001


# Configure the port via environment variable (default to 8081)
ARG PRESCRIPTION_PORT=8081
ENV PRESCRIPTION_PORT=${PRESCRIPTION_PORT}

EXPOSE ${PRESCRIPTION_PORT}

# Run the FastAPI server using the start_server.py script
CMD python ./api/start_server.py --host 0.0.0.0 --port ${PRESCRIPTION_PORT}